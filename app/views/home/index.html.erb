<meta name="google-signin-clientid" content="6221184737-9tajcsu7f37s9au8gup8fe7f6ku2kn88.apps.googleusercontent.com" />
<meta name="google-signin-scope" content="https://www.googleapis.com/auth/plus.login" />
<meta name="google-signin-cookiepolicy" content="single_host_origin" />
<meta name="google-signin-callback" content="signinCallback" />

<script>
  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    console.log('statusChangeCallback');
    console.log(response);
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
      // Logged into your app and Facebook.
      document.getElementById('fbLogin').style.display = 'none';
      document.getElementById('facebook_logout').style.display = 'inline';
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('fbLogin').style.display = 'block';
      document.getElementById('status').innerHTML = 'Not signed into facebook. ';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Not signed into facebook. ';
      document.getElementById('fbLogin').style.display = 'block';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
    FB.getLoginStatus(function(response) {
      statusChangeCallback(response);
    });
  }

  window.fbAsyncInit = function() {
	  FB.init({
	    appId      : '251074621767025',
	    cookie     : true,  // enable cookies to allow the server to access 
	                        // the session
	    xfbml      : true,  // parse social plugins on this page
	    version    : 'v2.0' // use version 2.0
	  });
	
	  // Now that we've initialized the JavaScript SDK, we call 
	  // FB.getLoginStatus().  This function gets the state of the
	  // person visiting this page and can return one of three states to
	  // the callback you provide.  They can be:
	  //
	  // 1. Logged into your app ('connected')
	  // 2. Logged into Facebook, but not your app ('not_authorized')
	  // 3. Not logged into Facebook and can't tell if they are logged into
	  //    your app or not.
	  //
	  // These three cases are handled in the callback function.
	  FB.getLoginStatus(function(response) {
	    statusChangeCallback(response);
	  });
  };

  // Load the SDK asynchronously
  (function(d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "//connect.facebook.net/en_US/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
  }(document, 'script', 'facebook-jssdk'));

  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      document.getElementById('status').innerHTML =
        'Thanks for logging in, ' + response.name + '!';
    });
  }
  
  function logout() {
  	FB.logout(function(response) {
  		document.getElementById('status').innerHTML = 'You signed out of facebook. ';
  		document.getElementById('facebook_logout').style.display = 'none';
  		document.getElementById('fbLogin').style.display = 'block';
	});
  }
  
  checkLoginState();
</script>
<header class="navbar navbar-static-top navbar-default" role="banner">
  <div class="container">
    <a href="../" class="navbar-brand">
      Client 2 Business Website
    </a>
  </div>
</header>
<div class="container" style="margin-top:80px">
  <div class="row">
    <div class="col-md-2"></div>
    <div class="col-md-4">
    <div class="login-container">
      <div id="output"></div>
      <div class="avatar"></div>
      <div class="form-box">
        <form action="" method="">
          <input name="user" type="text" placeholder="username">
          <input type="password" placeholder="password">
          <button class="btn btn-info btn-block login" type="submit">Login</button>
        </form>
      </div>
    </div>
    </div>
    <div class="col-md-4" style="margin-top:10px;">
      <div class="panel panel-success">
        <div class="panel-heading">
          Acceptto Login Status
        </div>
        <div class="panel-body">
          <% if @user.nil? %>
              <a href='/login' class="btn btn-success btn-group-lg">
                Login Using Acceptto
              </a>
          <% else %>
             <div style="color:green"> Current Logged In User: <%= @user %> | <a href="/logout?service=<%= Rails.application.config.host_url %>">Sign Out</a>
              <br />
              <!--User Extra Attributes: <%= request.session['cas']['extra_attributes'] %>-->
             </div>
            <% end %>
         </div>
      </div>
      <div class="panel panel-info">
        <div class="panel-heading">
          Facebook Login Status
        </div>
        <div class="panel-body">
          <span id="status">...</span>
          <span id="facebook_logout" style='display:none;'>
		   <a onclick="javascript:logout()" href="#">
            | Facebook Logout
           </a>
	      </span>
          <div id="fbLogin" style='display:none;'>
            <fb:login-button scope="public_profile,email" onlogin="checkLoginState();">
            </fb:login-button>
          </div>
      </div>
    </div>
      <div class="panel panel-danger " >
        <div class="panel-heading">
          Google Login Status
        </div>
        <div class="panel-body">
          <span id="google_status">
	</span>
          <div id='google_signed_in' style='display:none'>
            <table>
              <tr>
                <td>
                  <span id='pic'></span>
                </td>
                <td>
                  <span id='name'></span>
                </td>
              </tr>
            </table>
          </div>
          <br />
          <br />
          <button id="signinButton" style='display:none;'>Sign in with Google</button>
          <button id="signoutButton" onclick='javascript:signOut();
          ' style='display:none'>Sign out of Google</button>
        </div>
      </div>
  </div>
</div>
</div>
<script src="https://apis.google.com/js/client:plusone.js?onload=render"></script>

<script type="text/javascript">
	(function() {
	   var po = document.createElement('script');
	   po.type = 'text/javascript'; po.async = true;
	   po.src = 'https://apis.google.com/js/client:plusone.js?onload=render';
	   var s = document.getElementsByTagName('script')[0];
	   s.parentNode.insertBefore(po, s);
	 })();
	 
	function render() {
	   // Additional params including the callback, the rest of the params will
	   // come from the page-level configuration.
	   var additionalParams = {
	     'callback': signinCallback
	   };
	
	   // Attach a click listener to a button to trigger the flow.
	   var signinButton = document.getElementById('signinButton');
	   signinButton.addEventListener('click', function() {
	     gapi.auth.signIn(additionalParams); // Will use page level configuration
	   });
	
	}
	
	function signinCallback(authResult) {
	  console.log('Google authResult: ');
	  console.log(authResult);
	  if (authResult['status']['signed_in']) {
	    // Update the app to reflect a signed in user
	    // Hide the sign-in button now that the user is authorized, for example:
	    document.getElementById('signinButton').setAttribute('style', 'display: none');
	    document.getElementById('signoutButton').setAttribute('style', 'display: block');
	    document.getElementById('google_status').innerHTML = '';
	    gapi.client.load('plus','v1', loadProfile);
	  } else {
	    if (authResult['error'] == "user_signed_out") {
	    		document.getElementById('google_status').innerHTML = 'User Is Signed Out!';
	    	}
	    	else if 	(authResult['error'] == "access_denied") {
	    		document.getElementById('google_status').innerHTML = 'User denied access to your app!';
	    	}
	    	else if 	(authResult['error'] == "immediate_failed") {
	    		document.getElementById('google_status').innerHTML = 'Could not automatically log in the user!';
	    	}
	    	
	    document.getElementById('signinButton').setAttribute('style', 'display: block');
	    document.getElementById('signoutButton').setAttribute('style', 'display: none');
	    document.getElementById('google_signed_in').setAttribute('style', 'display: none');
	  }
	}
	
	function signOut() {
		gapi.auth.signOut();
		document.getElementById('signinButton').setAttribute('style', 'display: block');
	}
	
	/**
   * Uses the JavaScript API to request the user's profile, which includes
   * their basic information. When the plus.profile.emails.read scope is
   * requested, the response will also include the user's primary email address
   * and any other email addresses that the user made public.
   */
  function loadProfile(){
    var request = gapi.client.plus.people.get( {'userId' : 'me'} );
    request.execute(loadProfileCallback);
  }

  /**
   * Callback for the asynchronous request to the people.get method. The profile
   * and email are set to global variables. Triggers the user's basic profile
   * to display when called.
   */
  function loadProfileCallback(obj) {
    profile = obj;
    console.log("Google Profile Retrieved:")
	console.log(obj)
    document.getElementById('name').innerHTML = profile['displayName'];
    document.getElementById('pic').innerHTML = '<img src="' + profile['image']['url'] + '" />';
    document.getElementById('google_signed_in').setAttribute('style', 'display: block');
  }

</script>